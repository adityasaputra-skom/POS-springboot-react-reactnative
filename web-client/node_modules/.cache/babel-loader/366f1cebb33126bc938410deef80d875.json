{"ast":null,"code":"import { FIND_UNITS, FIND_UNIT_BY_ID } from \"./constants\";\nconst data = [{\n  id: 1,\n  name: \"Gram\"\n}, {\n  id: 2,\n  name: \"Pieces\"\n}, {\n  id: 3,\n  name: \"Kilogram\"\n}, {\n  id: 4,\n  name: \"Liter\"\n}, {\n  id: 5,\n  name: \"Kilobyte\"\n}, {\n  id: 6,\n  name: \"Kilobyte\"\n}, {\n  id: 7,\n  name: \"Kilobyte\"\n}];\n\nfunction sleep(delay) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport const findByUnitId = id => dispatch => sleep(3000).then(() => {\n  let result = null;\n\n  for (const e of data) {\n    if (e.id == id) {\n      dispatch({\n        result: e\n      });\n    }\n  }\n\n  dispatch({\n    data: result\n  });\n});\nexport const findAll = () => dispatch => sleep(3000).then(() => {\n  dispatch({\n    data: e\n  });\n});","map":{"version":3,"sources":["/home/aditya/Documents/github/bootcamp/ReactJS/web-client/src/action/units.js"],"names":["FIND_UNITS","FIND_UNIT_BY_ID","data","id","name","sleep","delay","Promise","resolve","setTimeout","findByUnitId","dispatch","then","result","e","findAll"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,eAArB,QAA4C,aAA5C;AAEA,MAAMC,IAAI,GAAG,CACX;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADW,EAKX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CALW,EASX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CATW,EAaX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAbW,EAiBX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAjBW,EAqBX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CArBW,EAyBX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAzBW,CAAb;;AA+BA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkB;AACnCC,IAAAA,UAAU,CAACD,OAAD,EAAUF,KAAV,CAAV;AACD,GAFM,CAAP;AAGD;;AAED,OAAO,MAAMI,YAAY,GAAGP,EAAE,IAAIQ,QAAQ,IACxCN,KAAK,CAAC,IAAD,CAAL,CAAYO,IAAZ,CAAiB,MAAM;AACrB,MAAIC,MAAM,GAAG,IAAb;;AACA,OAAK,MAAMC,CAAX,IAAgBZ,IAAhB,EAAsB;AACpB,QAAIY,CAAC,CAACX,EAAF,IAAQA,EAAZ,EAAgB;AACdQ,MAAAA,QAAQ,CAAC;AACPE,QAAAA,MAAM,EAAEC;AADD,OAAD,CAAR;AAGD;AACF;;AACDH,EAAAA,QAAQ,CAAC;AACPT,IAAAA,IAAI,EAAEW;AADC,GAAD,CAAR;AAGD,CAZD,CADK;AAeP,OAAO,MAAME,OAAO,GAAG,MAAMJ,QAAQ,IACnCN,KAAK,CAAC,IAAD,CAAL,CAAYO,IAAZ,CAAiB,MAAM;AACrBD,EAAAA,QAAQ,CAAC;AACPT,IAAAA,IAAI,EAAEY;AADC,GAAD,CAAR;AAGD,CAJD,CADK","sourcesContent":["import { FIND_UNITS, FIND_UNIT_BY_ID } from \"./constants\";\n\nconst data = [\n  {\n    id: 1,\n    name: \"Gram\"\n  },\n  {\n    id: 2,\n    name: \"Pieces\"\n  },\n  {\n    id: 3,\n    name: \"Kilogram\"\n  },\n  {\n    id: 4,\n    name: \"Liter\"\n  },\n  {\n    id: 5,\n    name: \"Kilobyte\"\n  },\n  {\n    id: 6,\n    name: \"Kilobyte\"\n  },\n  {\n    id: 7,\n    name: \"Kilobyte\"\n  }\n];\n\nfunction sleep(delay) {\n  return new Promise(function(resolve) {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport const findByUnitId = id => dispatch =>\n  sleep(3000).then(() => {\n    let result = null;\n    for (const e of data) {\n      if (e.id == id) {\n        dispatch({\n          result: e\n        });\n      }\n    }\n    dispatch({\n      data: result\n    });\n  });\n\nexport const findAll = () => dispatch =>\n  sleep(3000).then(() => {\n    dispatch({\n      data: e\n    });\n  });\n"]},"metadata":{},"sourceType":"module"}