{"ast":null,"code":"import { FIND_UNIT_REQUEST, FIND_UNIT_SUCCESS, FIND_UNIT_FAILURE, FIND_UNITS_REQUEST, FIND_UNITS_SUCCESS, FIND_UNITS_FAILURE } from \"./constants\";\nconst data = [{\n  id: 1,\n  name: \"Gram\"\n}, {\n  id: 2,\n  name: \"Pieces\"\n}, {\n  id: 3,\n  name: \"Kilogram\"\n}, {\n  id: 4,\n  name: \"Liter\"\n}, {\n  id: 5,\n  name: \"Kilobyte\"\n}, {\n  id: 6,\n  name: \"Kilobyte\"\n}, {\n  id: 7,\n  name: \"Kilobyte\"\n}];\n\nfunction sleep(delay) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport const findById = id => dispatch => {\n  dispatch({\n    type: FIND_UNIT_REQUEST\n  });\n  sleep(3000).then(() => {\n    let result = null;\n\n    for (const e of data) {\n      if (e.id == id) {\n        dispatch({\n          result: e\n        });\n      }\n    }\n\n    if (result) {\n      dispatch({\n        type: FIND_UNIT_SUCCESS,\n        data: result\n      });\n    } else {\n      throw new Error(\"Sorry! Units not found.\");\n    }\n  }).catch(error => {\n    dispatch({\n      type: FIND_UNIT_FAILURE,\n      error: error\n    });\n  });\n};\nexport const findAll = () => dispatch => {\n  dispatch({\n    type: FIND_UNITS_REQUEST\n  });\n  sleep(3000).then(() => {\n    dispatch({\n      type: FIND_UNITS_SUCCESS,\n      data: data\n    });\n  });\n};","map":{"version":3,"sources":["/home/aditya/Documents/github/bootcamp/ReactJS/web-client/src/action/units.js"],"names":["FIND_UNIT_REQUEST","FIND_UNIT_SUCCESS","FIND_UNIT_FAILURE","FIND_UNITS_REQUEST","FIND_UNITS_SUCCESS","FIND_UNITS_FAILURE","data","id","name","sleep","delay","Promise","resolve","setTimeout","findById","dispatch","type","then","result","e","Error","catch","error","findAll"],"mappings":"AAAA,SACEA,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,kBAJF,EAKEC,kBALF,EAMEC,kBANF,QAOO,aAPP;AASA,MAAMC,IAAI,GAAG,CACX;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADW,EAKX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CALW,EASX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CATW,EAaX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAbW,EAiBX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAjBW,EAqBX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CArBW,EAyBX;AACED,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAzBW,CAAb;;AA+BA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkB;AACnCC,IAAAA,UAAU,CAACD,OAAD,EAAUF,KAAV,CAAV;AACD,GAFM,CAAP;AAGD;;AAED,OAAO,MAAMI,QAAQ,GAAGP,EAAE,IAAIQ,QAAQ,IAAI;AACxCA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEhB;AADC,GAAD,CAAR;AAIAS,EAAAA,KAAK,CAAC,IAAD,CAAL,CACGQ,IADH,CACQ,MAAM;AACV,QAAIC,MAAM,GAAG,IAAb;;AACA,SAAK,MAAMC,CAAX,IAAgBb,IAAhB,EAAsB;AACpB,UAAIa,CAAC,CAACZ,EAAF,IAAQA,EAAZ,EAAgB;AACdQ,QAAAA,QAAQ,CAAC;AACPG,UAAAA,MAAM,EAAEC;AADD,SAAD,CAAR;AAGD;AACF;;AACD,QAAID,MAAJ,EAAY;AACVH,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEf,iBADC;AAEPK,QAAAA,IAAI,EAAEY;AAFC,OAAD,CAAR;AAID,KALD,MAKO;AACL,YAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF,GAlBH,EAmBGC,KAnBH,CAmBSC,KAAK,IAAI;AACdP,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEd,iBADC;AAEPoB,MAAAA,KAAK,EAAEA;AAFA,KAAD,CAAR;AAID,GAxBH;AAyBD,CA9BM;AAgCP,OAAO,MAAMC,OAAO,GAAG,MACvBR,QAAQ,IAAI;AACVA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEb;AADC,GAAD,CAAR;AAGFM,EAAAA,KAAK,CAAC,IAAD,CAAL,CAAYQ,IAAZ,CAAiB,MAAM;AACrBF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEZ,kBADC;AAEPE,MAAAA,IAAI,EAAEA;AAFC,KAAD,CAAR;AAID,GALD;AAMC,CAXM","sourcesContent":["import {\n  FIND_UNIT_REQUEST,\n  FIND_UNIT_SUCCESS,\n  FIND_UNIT_FAILURE,\n  FIND_UNITS_REQUEST,\n  FIND_UNITS_SUCCESS,\n  FIND_UNITS_FAILURE\n} from \"./constants\";\n\nconst data = [\n  {\n    id: 1,\n    name: \"Gram\"\n  },\n  {\n    id: 2,\n    name: \"Pieces\"\n  },\n  {\n    id: 3,\n    name: \"Kilogram\"\n  },\n  {\n    id: 4,\n    name: \"Liter\"\n  },\n  {\n    id: 5,\n    name: \"Kilobyte\"\n  },\n  {\n    id: 6,\n    name: \"Kilobyte\"\n  },\n  {\n    id: 7,\n    name: \"Kilobyte\"\n  }\n];\n\nfunction sleep(delay) {\n  return new Promise(function(resolve) {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport const findById = id => dispatch => {\n  dispatch({\n    type: FIND_UNIT_REQUEST\n  });\n\n  sleep(3000)\n    .then(() => {\n      let result = null;\n      for (const e of data) {\n        if (e.id == id) {\n          dispatch({\n            result: e\n          });\n        }\n      }\n      if (result) {\n        dispatch({\n          type: FIND_UNIT_SUCCESS,\n          data: result\n        });\n      } else {\n        throw new Error(\"Sorry! Units not found.\");\n      }\n    })\n    .catch(error => {\n      dispatch({\n        type: FIND_UNIT_FAILURE,\n        error: error\n      });\n    });\n};\n\nexport const findAll = () => \ndispatch => {\n  dispatch({\n    type: FIND_UNITS_REQUEST\n  });\nsleep(3000).then(() => {\n  dispatch({\n    type: FIND_UNITS_SUCCESS,\n    data: data\n  });\n});\n}\n"]},"metadata":{},"sourceType":"module"}