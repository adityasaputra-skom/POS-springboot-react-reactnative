{"ast":null,"code":"const axios = require(\"axios\");\n\nconst instanceAxios = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL\n});\n\nfunction sleep(delay, value) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay, value);\n  });\n}\n\ninstanceAxios.interceptors.response.use(function (response) {\n  const {\n    data\n  } = response;\n\n  if (data.code !== 0) {\n    const error = new Error(data.message || \"Uknown error.\");\n    error.data = data.data;\n    throw error;\n  }\n\n  return sleep(100, data.data);\n}, function (error) {\n  return Promise.reject(error);\n});\nexport { instanceAxios };","map":{"version":3,"sources":["/home/aditya/Documents/github/POS-springboot-react-reactnative/web-client/src/utils/apiUtil.js"],"names":["axios","require","instanceAxios","create","baseURL","process","env","REACT_APP_BACKEND_URL","sleep","delay","value","Promise","resolve","setTimeout","interceptors","response","use","data","code","error","Error","message","reject"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADY,CAAb,CAAtB;;AAIA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6B;AAC3B,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkB;AACnCC,IAAAA,UAAU,CAACD,OAAD,EAAUH,KAAV,EAAiBC,KAAjB,CAAV;AACD,GAFM,CAAP;AAGD;;AAEDR,aAAa,CAACY,YAAd,CAA2BC,QAA3B,CAAoCC,GAApC,CACE,UAASD,QAAT,EAAmB;AACjB,QAAM;AAAEE,IAAAA;AAAF,MAAWF,QAAjB;;AACA,MAAIE,IAAI,CAACC,IAAL,KAAc,CAAlB,EAAqB;AACnB,UAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,eAA1B,CAAd;AACAF,IAAAA,KAAK,CAACF,IAAN,GAAaA,IAAI,CAACA,IAAlB;AACA,UAAME,KAAN;AACD;;AACD,SAAOX,KAAK,CAAC,GAAD,EAAMS,IAAI,CAACA,IAAX,CAAZ;AACD,CATH,EAUE,UAASE,KAAT,EAAgB;AACd,SAAOR,OAAO,CAACW,MAAR,CAAeH,KAAf,CAAP;AACD,CAZH;AAeA,SAASjB,aAAT","sourcesContent":["const axios = require(\"axios\");\nconst instanceAxios = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL\n});\n\nfunction sleep(delay, value) {\n  return new Promise(function(resolve) {\n    setTimeout(resolve, delay, value);\n  });\n}\n\ninstanceAxios.interceptors.response.use(\n  function(response) {\n    const { data } = response;\n    if (data.code !== 0) {\n      const error = new Error(data.message || \"Uknown error.\");\n      error.data = data.data;\n      throw error;\n    }\n    return sleep(100, data.data);\n  },\n  function(error) {\n    return Promise.reject(error);\n  }\n);\n\nexport { instanceAxios };\n"]},"metadata":{},"sourceType":"module"}