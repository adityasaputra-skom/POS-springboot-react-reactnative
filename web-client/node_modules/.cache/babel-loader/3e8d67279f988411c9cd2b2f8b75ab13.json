{"ast":null,"code":"// import React, { Component } from \"react\";\n// import Header from \"../../../component/header\";\n// import MUIDataTable from \"mui-datatables\";\n// import { YearSummary } from \"../../../action/transactions\";\n// import { Container } from \"semantic-ui-react\";\n// import { Link } from \"react-router-dom\";\n// import { connect } from \"react-redux\";\n// import { CircularProgress, withStyles } from \"@material-ui/core\";\n// import styles from \"./styles\";\n// class TransactionListPage extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       data: [],\n//       total: 0,\n//       table: {\n//         sort: \"asc\",\n//         size: 20,\n//         page: 0,\n//         search: {\n//           name: \"\"\n//         }\n//       },\n//       error: null\n//     };\n//   }\n//   onReload = () => {\n//     this.reload();\n//   };\n//   reload = () => {\n//     this.props.YearSummary(this.state.table);\n//   };\n//   componentDidMount() {\n//     this.reload();\n//   }\n//   onChangeRowsPerPage = numbersOfRow => {\n//     const { table } = this.state;\n//     this.setState({ table: { ...table, size: numbersOfRow } });\n//   };\n//   componentDidUpdate(prevProps, prevState) {\n//     const { error, data } = this.props;\n//     if (prevProps.data !== data) {\n//       this.setState({ data: data.entries, total: data.total });\n//     } else if (error && prevProps.error !== error) {\n//       this.setState({ error: error });\n//     }\n//   }\n//   onChangePage = currentPage => {\n//     const { table } = this.state;\n//     this.setState({ table: { ...table, search: { name: currentPage } } });\n//   };\n//   onSearchChange = searchText => {\n//     const { table } = this.state;\n//     this.setState({ table: { ...table, search: { name: searchText } } });\n//   };\n//   onColumnSortChange = (changedColumn, direction) => {\n//     const { table } = this.state;\n//     const sort = direction === \"descending\" ? \"desc\" : \"asc\";\n//     this.setState({ table: { ...table, sort } });\n//   };\n//   render() {\n//     const { classes, loading } = this.props;\n//     const { data, total, error, table } = this.state;\n//     const columns = [\n//       {\n//         name: \"id\",\n//         label: \"ID\",\n//         options: {\n//           sortDirection: table.sort\n//         }\n//       },\n//       {\n//         name: \"amount\",\n//         label: \"Name\",\n//         options: {\n//           sort: false\n//         }\n//       },\n//       {\n//         name: \"type\",\n//         label: \"Type\",\n//         options: {\n//           sort: false\n//         }\n//       }\n//     ];\n//     const options = {\n//       serverSide: true,\n//       page: table.page,\n//       filter: false,\n//       count: total,\n//       rowsPerPage: table.size,\n//       rowsPerPageOptions: [5, 10, 25, 50, 100],\n//       onChangeRowsPerPage: this.onChangeRowsPerPage,\n//       onChangePage: this.onChangePage,\n//       onSearchChange: this.onSearchChange,\n//       onColumnSortChange: this.onColumnSortChange,\n//       searchText: table.search.name,\n//       selectableRows: \"single\",\n//       textLabels: {\n//         body: {\n//           noMatch: loading ? (\n//             <CircularProgress />\n//           ) : (\n//             \"Sorry, no matching records found\"\n//           )\n//         }\n//       }\n//     };\n//     return (\n//       <div>\n//         <Header error={error}>\n//           <Container>\n//             <div style={{ boxSizing: \"content-box\" }}>\n//               <MUIDataTable\n//                 error={error}\n//                 title={\"Summary Transaction By Year\"}\n//                 data={!loading ? data : []}\n//                 columns={columns}\n//                 options={options}\n//               />\n//             </div>\n//             <div className={classes.buttonContainer}>\n//               <button\n//                 className=\"ui orange button\"\n//                 onClick={this.reload}\n//                 disabled={loading}\n//               >\n//                 <i className=\"sync icon\"></i>Back\n//               </button>\n//             </div>\n//           </Container>\n//         </Header>\n//       </div>\n//     );\n//   }\n// }\n// const mapStateToProps = state => ({\n//   data: state.findSummaryByYear.data,\n//   loading: state.findSummaryByYear.loading,\n//   error: state.findSummaryByYear.error\n// });\n// const mapDispatchToProps = {\n//   YearSummary\n// };\n// export default withStyles(styles, { withTheme: true })(\n//   connect(mapStateToProps, mapDispatchToProps)(TransactionListPage)\n// );","map":{"version":3,"sources":["/home/aditya/Documents/github/bootcamp/ReactJS/web-client/src/scenes/transaction/summary/YearSummary.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from \"react\";\n// import Header from \"../../../component/header\";\n// import MUIDataTable from \"mui-datatables\";\n// import { YearSummary } from \"../../../action/transactions\";\n// import { Container } from \"semantic-ui-react\";\n// import { Link } from \"react-router-dom\";\n// import { connect } from \"react-redux\";\n// import { CircularProgress, withStyles } from \"@material-ui/core\";\n// import styles from \"./styles\";\n// class TransactionListPage extends Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       data: [],\n//       total: 0,\n//       table: {\n//         sort: \"asc\",\n//         size: 20,\n//         page: 0,\n//         search: {\n//           name: \"\"\n//         }\n//       },\n//       error: null\n//     };\n//   }\n\n//   onReload = () => {\n//     this.reload();\n//   };\n\n//   reload = () => {\n//     this.props.YearSummary(this.state.table);\n//   };\n\n//   componentDidMount() {\n//     this.reload();\n//   }\n\n//   onChangeRowsPerPage = numbersOfRow => {\n//     const { table } = this.state;\n//     this.setState({ table: { ...table, size: numbersOfRow } });\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     const { error, data } = this.props;\n\n//     if (prevProps.data !== data) {\n//       this.setState({ data: data.entries, total: data.total });\n//     } else if (error && prevProps.error !== error) {\n//       this.setState({ error: error });\n//     }\n//   }\n\n//   onChangePage = currentPage => {\n//     const { table } = this.state;\n//     this.setState({ table: { ...table, search: { name: currentPage } } });\n//   };\n\n//   onSearchChange = searchText => {\n//     const { table } = this.state;\n//     this.setState({ table: { ...table, search: { name: searchText } } });\n//   };\n\n//   onColumnSortChange = (changedColumn, direction) => {\n//     const { table } = this.state;\n//     const sort = direction === \"descending\" ? \"desc\" : \"asc\";\n//     this.setState({ table: { ...table, sort } });\n//   };\n//   render() {\n//     const { classes, loading } = this.props;\n//     const { data, total, error, table } = this.state;\n\n//     const columns = [\n//       {\n//         name: \"id\",\n//         label: \"ID\",\n//         options: {\n//           sortDirection: table.sort\n//         }\n//       },\n//       {\n//         name: \"amount\",\n//         label: \"Name\",\n//         options: {\n//           sort: false\n//         }\n//       },\n//       {\n//         name: \"type\",\n//         label: \"Type\",\n//         options: {\n//           sort: false\n//         }\n//       }\n//     ];\n\n//     const options = {\n//       serverSide: true,\n//       page: table.page,\n//       filter: false,\n//       count: total,\n//       rowsPerPage: table.size,\n//       rowsPerPageOptions: [5, 10, 25, 50, 100],\n//       onChangeRowsPerPage: this.onChangeRowsPerPage,\n//       onChangePage: this.onChangePage,\n//       onSearchChange: this.onSearchChange,\n//       onColumnSortChange: this.onColumnSortChange,\n//       searchText: table.search.name,\n//       selectableRows: \"single\",\n//       textLabels: {\n//         body: {\n//           noMatch: loading ? (\n//             <CircularProgress />\n//           ) : (\n//             \"Sorry, no matching records found\"\n//           )\n//         }\n//       }\n//     };\n\n//     return (\n//       <div>\n//         <Header error={error}>\n//           <Container>\n//             <div style={{ boxSizing: \"content-box\" }}>\n//               <MUIDataTable\n//                 error={error}\n//                 title={\"Summary Transaction By Year\"}\n//                 data={!loading ? data : []}\n//                 columns={columns}\n//                 options={options}\n//               />\n//             </div>\n//             <div className={classes.buttonContainer}>\n//               <button\n//                 className=\"ui orange button\"\n//                 onClick={this.reload}\n//                 disabled={loading}\n//               >\n//                 <i className=\"sync icon\"></i>Back\n//               </button>\n//             </div>\n//           </Container>\n//         </Header>\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => ({\n//   data: state.findSummaryByYear.data,\n//   loading: state.findSummaryByYear.loading,\n//   error: state.findSummaryByYear.error\n// });\n\n// const mapDispatchToProps = {\n//   YearSummary\n// };\n\n// export default withStyles(styles, { withTheme: true })(\n//   connect(mapStateToProps, mapDispatchToProps)(TransactionListPage)\n// );\n"]},"metadata":{},"sourceType":"module"}